@{
   ViewBag.Title = "Basic RSA Sample";
}

<h2>Basic RSA Sample</h2>

<div class="row">
	<div class="col-md-6">
		<h3>Your certificates</h3>
		<select id="certificateSelect" style="font-size: 1em"></select>
		<br />
		<br />
		<button id="readCertButton" class="btn btn-info" type="button">Show Certificate Information</button>
	</div>
	<div class="col-md-6" id="certInfoPanel">
		<h3>Certificate Information</h3>
	</div>
</div>
<hr />
<div class="row">
	<div class="col-md-6">
		<h3>Sign Data with RSA SHA-256</h3>
		<div class="form-group">
			<label for="signData">Text to sign</label>
			<input class="form-control" maxlength="60" id="signData" value="Some data" />
		</div>
		<button id="signDataButton" class="btn btn-info" type="button">Sign Data</button>
	</div>
	<div class="col-md-6" style="word-wrap: break-word;">
		<h3>Signature Data</h3>
		<div id="sigInfoPanel"></div>
	</div>
</div>
<hr />
<div class="row">
	<div class="col-md-6">
		<h3>Sign Hash</h3>
		<div class="form-group">
			<label for="signHash">Text to sign</label>
			<input class="form-control" maxlength="60" id="signHash" value="Some data" />
		</div>
		<button id="signHashButton" class="btn btn-info" type="button">Sign Hash</button>
		<button id="verifyHashButton" class="btn btn-info" type="button">Verify Signature</button>
	</div>
	<div class="col-md-6" style="word-wrap: break-word;">
		<h3>Signature Data</h3>
		<div id="sigHashInfoPanel"></div>
	</div>
</div>
<div class="row">
	<div class="col-md-8">
		<div id="logPanel">
		</div>
	</div>
</div>

@section scripts {

	@*
		The file below contains the JS lib for accessing the Web PKI component. For more information, see:
		https://webpki.lacunasoftware.com/#/Documentation
	*@
    <script src="https://get.webpkiplugin.com/Scripts/LacunaWebPKI/lacuna-web-pki-2.5.0.js"></script>

    <script src="https://rawgit.com/emn178/js-sha256/master/build/sha256.min.js"></script>

    <script>

		// Get an instance of the LacunaWebPKI object. If a license was set on Web.config, the _Layout.cshtml master
		// view will have placed it on the global variable _webPkiLicense, which we pass to the class constructor.
		var pki = new LacunaWebPKI(_webPkiLicense);

        var allCerts = [];
        var hashSignature = "";

        function start() {
            var nowStr = new Date().toISOString();
            $('#signData').val(nowStr);
            $('#signHash').val(nowStr);
            $('#readCertButton').click(readCert);
            $('#signDataButton').click(signData);
            $('#signHashButton').click(signHash);
            $('#verifyHashButton').click(verifyHash);
            $('#verifyHashButton').prop("disabled", true);
            log('Initializing component ...');
            pki.init(onWebPkiReady);
        }

        function onWebPkiReady() {
            log('Component ready, listing certificates ...');
            pki.listCertificates().success(function (certs) {
                allCerts = certs;
                log(certs.length + ' certificates found.');
                var select = $('#certificateSelect');
                $.each(certs,
                    function () {
                        select.append(
                            $('<option />')
                                .val(this.thumbprint)
                                .text(this.subjectName + ' (issued by ' + this.issuerName + ')')
                        );
                    });
            });
        }

        function readCert() {
            var selectedCertThumb = $('#certificateSelect').val();
            clearCertInfo();
            $.each(allCerts,
                function () {
                    if (selectedCertThumb === this.thumbprint) {
                        logCertInfo('Thumbprint: ' + this.thumbprint);
                        logCertInfo('Subject Name: ' + this.subjectName);
                        logCertInfo('Issued Name: ' + this.issuerName);
                        logCertInfo('Validity Start: ' + this.validityStart);
                        logCertInfo('Validity End: ' + this.validityEnd);
                        if (this.pkiBrazil.certificateType !== "Unknown") {
                            logCertInfo('Certificate Type: ' + this.pkiBrazil.certificateType);
                            logCertInfo('CPF: ' + this.pkiBrazil.cpf);
                            logCertInfo('Date Of Birth: ' + this.pkiBrazil.dateOfBirth);
                            logCertInfo('Responsável: ' + this.pkiBrazil.responsavel);
                            if (this.pkiBrazil.isPessoaJuridica === true) {
                                logCertInfo('CNPJ: ' + this.pkiBrazil.cnpj);
                            }
                        }
                        logCertInfo('Key Usage: ');
                        logCertInfo('&nbsp&nbsp;&nbsp&nbsp;CRL Sign: ' + this.keyUsage.crlSign);
                        logCertInfo('&nbsp&nbsp;&nbsp&nbsp;Data Encipherment: ' + this.keyUsage.dataEncipherment);
                        logCertInfo('&nbsp&nbsp;&nbsp&nbsp;Digital Signature: ' + this.keyUsage.digitalSignature);
                        logCertInfo('&nbsp&nbsp;&nbsp&nbsp;Key Encipherment: ' + this.keyUsage.keyEncipherment);
                        logCertInfo('&nbsp&nbsp;&nbsp&nbsp;Non Repudiation: ' + this.keyUsage.nonRepudiation);
                    }
                }
            );
        }

        function signData() {
            $('#sigInfoPanel').empty();
            var selectedCertThumb = $('#certificateSelect').val();
            log('Signing data with certificate: ' + selectedCertThumb);
            var data = $('#signData').val();
            var dataToSign = btoa(data);
            pki.signData({
                thumbprint: selectedCertThumb,
                data: dataToSign,
                digestAlgorithm: 'SHA-256'
            }).success(function (signature) {
                $('#sigInfoPanel').append(signature);
                log('Result: ' + signature);
            });
        }

        function signHash() {
            $('#sigHashInfoPanel').empty();
            var selectedCertThumb = $('#certificateSelect').val();
            log('Signing hash with certificate: ' + selectedCertThumb);
            var data = $('#signHash').val();
            var hashToSign = sha256.arrayBuffer(data);
            var base64String = btoa(String.fromCharCode.apply(null, new Uint8Array(hashToSign)));

            $('#sigHashInfoPanel').append('Hash: ' + base64String + '<br/><br/>');
            pki.signHash({
                thumbprint: selectedCertThumb,
                hash: base64String,
                digestAlgorithm: 'SHA-256'
            }).success(function (signature) {
                hashSignature = signature;
                $('#sigHashInfoPanel').append('Signature: ' + signature);
                $('#verifyHashButton').prop("disabled", false);
                log('Result: ' + signature);
            });
        }

        function log(message) {
            //$('#logPanel').append('<p>' + message + '</p>');
            if (window.console) {
                window.console.log(message);
            }
        }

        function logCertInfo(message) {
            $('#certInfoPanel').append(message + '<br/>');
        }

        function clearCertInfo() {
            $('#certInfoPanel').empty();
            $('#certInfoPanel').append('<h3>Certificate Information</h3>');
        }


        function verifyHash() {
            var selectedCertThumb = $('#certificateSelect').val();
            var data = $('#signHash').val();
            pki.readCertificate(selectedCertThumb).success(function (certEncoding) {
                $.ajax({
                    method: 'POST',
                    url: '/api/sign/validate',
                    data: JSON.stringify({
                        originalMessage: data,
                        signedMessage: hashSignature,
                        certificate: certEncoding
                    }),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (result, status) {
                        $('#sigHashInfoPanel').append('<br/><br/>Validate: ' + result + '<br/>');
                    }
                });
            });
        }

        $(start);
    </script>
}
